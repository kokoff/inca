    [dataTable, ~, ~, ~] = getDataTable();
    x = dataTable{:,{'Temperature','Humidity','Light','CO2','HumidityRatio'}}';
    t = dataTable{:, {'Occupancy'}}';
    
 function [table1, tableTest1, tableTrain, tableTest2] = getDataTable()
    datatest1 = getDataset('data\datatest.txt');
    datatraining = getDataset('data\datatraining.txt');
    datatest2 = getDataset('data\datatest2.txt');

    dates = [datatest1.Date; datatraining.Date; datatest2.Date];
    temp = [datatest1.Temperature; datatraining.Temperature; datatest2.Temperature];
    hum = [datatest1.Humidity; datatraining.Humidity; datatest2.Humidity];
    light = [datatest1.Light; datatraining.Light; datatest2.Light];
    co2 = [datatest1.CO2; datatraining.CO2; datatest2.CO2];
    humr = [datatest1.HumidityRatio; datatraining.HumidityRatio; datatest2.HumidityRatio];
    occ = [datatest1.Occupancy; datatraining.Occupancy; datatest2.Occupancy];
    
    tableTest1 = table(datatest1.Date, datatest1.Temperature, datatest1.Humidity,...
        datatest1.Light, datatest1.CO2, datatest1.HumidityRatio, datatest1.Occupancy,...
        'VariableNames', {'Date','Temperature','Humidity','Light','CO2','HumidityRatio','Occupancy'});
    
    tableTest2 = table(datatraining.Date, datatraining.Temperature, datatraining.Humidity,...
        datatraining.Light, datatraining.CO2, datatraining.HumidityRatio, datatraining.Occupancy,...
        'VariableNames', {'Date','Temperature','Humidity','Light','CO2','HumidityRatio','Occupancy'});
    
    tableTrain = table(datatest2.Date, datatest2.Temperature, datatest2.Humidity,...
        datatest2.Light, datatest2.CO2, datatest2.HumidityRatio, datatest2.Occupancy,...
        'VariableNames', {'Date','Temperature','Humidity','Light','CO2','HumidityRatio','Occupancy'});
    
    table1 = table(dates, temp, hum, light, co2, humr, occ, ...
        'VariableNames', {'Date','Temperature','Humidity','Light','CO2','HumidityRatio','Occupancy'});
end


function datatraining = getDataset(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   DATATRAINING = IMPORTFILE(FILENAME) Reads data from text file FILENAME
%   for the default selection.
%
%   DATATRAINING = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from
%   rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   datatraining = importfile('datatraining.txt', 2, 8144);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/03/17 14:26:37

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Format for each line of text:
%   column2: datetimes (%{yyyy-MM-dd HH:mm:ss}D)
%	column3: double (%f)
%   column4: double (%f)
%	column5: double (%f)
%   column6: double (%f)
%	column7: double (%f)
%   column8: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*q%{yyyy-MM-dd HH:mm:ss}D%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
datatraining = table(dataArray{1:end-1}, 'VariableNames', {'Date','Temperature','Humidity','Light','CO2','HumidityRatio','Occupancy'});

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% datatraining.Temperature=datenum(datatraining.Temperature);

end